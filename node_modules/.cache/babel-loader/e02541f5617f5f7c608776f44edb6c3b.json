{"ast":null,"code":"var _jsxFileName = \"/home/shadi/Desktop/Project React/weather-api/src/App.js\";\nimport React, { Component } from \"react\";\nimport './css/style.css'; // components\n\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport Error from \"./components/Error\";\nimport Loading from \"./components/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'c23b7fd08aef347098dd37479858ee5b';\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      city: 'Damascus',\n      country: 'Sirya',\n      icon: '',\n      temp: 0,\n      temp_min: 0,\n      temp_max: 0,\n      description: '',\n      status: false,\n      error: false,\n      loading: fal\n    };\n\n    this.getData = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n      const data = await response.json();\n\n      if (response.status == 200) {\n        this.setState({\n          city: city,\n          country: country,\n          temp: this.convertToSilsious(data.main.temp),\n          temp_min: this.convertToSilsious(data.main.temp_min),\n          temp_max: this.convertToSilsious(data.main.temp_max),\n          description: data.weather[0].description,\n          icon: data.weather[0].icon,\n          status: true,\n          error: false\n        });\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.convertToSilsious = temp => {\n      return Math.floor(temp - 273.15);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        getData: this.getData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), this.state.error ? /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 32\n      }, this) : '', this.state.status ? /*#__PURE__*/_jsxDEV(Weather, {\n        data: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/shadi/Desktop/Project React/weather-api/src/App.js"],"names":["React","Component","Form","Weather","Error","Loading","API_KEY","App","state","city","country","icon","temp","temp_min","temp_max","description","status","error","loading","fal","getData","e","preventDefault","target","elements","value","response","fetch","data","json","setState","convertToSilsious","main","weather","Math","floor","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport './css/style.css';\n\n\n\n// components\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport Error from \"./components/Error\";\nimport Loading from \"./components/Loading\";\n\nconst API_KEY = 'c23b7fd08aef347098dd37479858ee5b';\n\nexport default class App extends Component {\n\n\n  state = {\n    city:'Damascus',\n    country:'Sirya',\n    icon:'',\n    temp:0,\n    temp_min:0,\n    temp_max:0,\n    description:'',\n    status:false,\n    error:false,\n    loading:fal\n  }\n\n\n\n  getData = async (e)=>{e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`)\n    const data = await response.json()\n\n    if(response.status == 200)\n    {\n      this.setState({\n        city:city,\n        country:country,\n        temp:this.convertToSilsious(data.main.temp), \n        temp_min:this.convertToSilsious(data.main.temp_min), \n        temp_max:this.convertToSilsious(data.main.temp_max),\n        description:data.weather[0].description,\n        icon:data.weather[0].icon,\n        status:true,\n        error:false,\n      })\n    }\n    else\n    {\n      this.setState({error:true})\n    }\n  \n  }\n\n\n  convertToSilsious = (temp)=>{\n    return Math.floor(temp - 273.15)     \n  }\n\n\n  render(){\n    return (\n      <div className=\"app\">\n        {/* <div className=\"overlay\"></div> */}\n        <Form  getData={this.getData} />\n\n          {this.state.error  ? <Error/> : '' }\n          {this.state.status  ? <Weather  data={this.state} /> : '' }\n      </div>\n    );\n  }\n  \n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}